@page "/kanban"
@using System.Net.Http.Json
@using erp.DTOs.Kanban
@using erp.Services
@using MudBlazor
@inject IApiService Api
@inject NavigationManager Nav

<div class="kanban-page">
    <div class="kanban-header">
        <MudStack Row Spacing="2">
            <MudText Typo="Typo.h5">Meu Kanban</MudText>
            <MudSpacer />
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NewColumn">Nova Coluna</MudButton>
        </MudStack>
        <MudDivider Class="my-2"/>
    </div>

    <div class="kanban-scroll">
        @if (_columns is null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
        else
        {
            <MudDropContainer T="KanbanCardDto"
                              @ref="_dropContainer"
                              Items="@_allCards"
                                  ItemsSelector="@((KanbanCardDto item, string column) => string.Equals(item.ColumnId.ToString(), column, StringComparison.Ordinal))"
                              ItemDropped="OnCardDropped"
                                  Class="kanban-board d-flex flex-row">
                <ChildContent>
                    @foreach (var col in _columns.OrderBy(c => c.Position))
                    {
                        <MudPaper Elevation="6" Class="kanban-column pa-2">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Typo="Typo.subtitle1">@col.Title</MudText>
                                <MudSpacer/>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => RenameColumn(col)"/>
                            </MudStack>
                            <MudDivider Class="my-1"/>
                            <MudDropZone T="KanbanCardDto" Identifier="@col.Id.ToString()" Class="kanban-cards mud-height-full" />
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" OnClick="() => NewCard(col)">Adicionar</MudButton>
                        </MudPaper>
                    }
                </ChildContent>
                <ItemRenderer>
                        <MudPaper Elevation="2" Class="pa-2 rounded-lg my-2 kanban-item" Style="cursor: grab;">
                        <MudText Typo="Typo.body1">@context.Title</MudText>
                        @if (!string.IsNullOrWhiteSpace(context.Description))
                        {
                            <MudText Typo="Typo.caption" Class="text-secondary">@context.Description</MudText>
                        }
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        }
    </div>
</div>

@code {
    private List<ColumnVm>? _columns;

    protected override async Task OnInitializedAsync()
    {
        var ensureBoard = await Api.GetAsync("api/kanban/board");
        if (!ensureBoard.IsSuccessStatusCode)
        {
            if ((int)ensureBoard.StatusCode == 401)
            {
                Nav.NavigateTo("/login", forceLoad: true);
                return;
            }
            throw new HttpRequestException($"Falha ao carregar quadro: {(int)ensureBoard.StatusCode}");
        }

        var data = await Api.GetAsync<ColumnsResponse>("api/kanban/columns");
    _columns = data?.Columns ?? new();
    _allCards = _columns.SelectMany(c => c.Cards).ToList();
    }

    private async Task NewColumn()
    {
        var title = await PromptAsync("Título da coluna");
        if (string.IsNullOrWhiteSpace(title)) return;
        var created = await Api.PostAsJsonAsync("api/kanban/columns", new CreateColumnRequest(title));
        if (created.IsSuccessStatusCode)
        {
            var data = await Api.GetAsync<ColumnsResponse>("api/kanban/columns");
            _columns = data?.Columns ?? new();
            _allCards = _columns.SelectMany(c => c.Cards).ToList();
            _dropContainer?.Refresh();
        }
    }

    private async Task RenameColumn(ColumnVm col)
    {
        var title = await PromptAsync("Novo título", col.Title);
        if (string.IsNullOrWhiteSpace(title)) return;
    var res = await Api.PutAsJsonAsync($"api/kanban/columns/{col.Id}/title", new RenameColumnRequest(title));
        if (res.IsSuccessStatusCode)
        {
            col.Title = title;
            StateHasChanged();
        }
    }

    private async Task NewCard(ColumnVm col)
    {
        var title = await PromptAsync("Título do card");
        if (string.IsNullOrWhiteSpace(title)) return;
        var desc = await PromptAsync("Descrição (opcional)");
        var res = await Api.PostAsJsonAsync("api/kanban/cards", new CreateCardRequest(col.Id, title, desc));
        if (res.IsSuccessStatusCode)
        {
            var data = await Api.GetAsync<ColumnsResponse>("api/kanban/columns");
            _columns = data?.Columns ?? new();
            _allCards = _columns.SelectMany(c => c.Cards).ToList();
            _dropContainer?.Refresh();
        }
    }

    private MudDropContainer<KanbanCardDto>? _dropContainer;
    private List<KanbanCardDto> _allCards = new();

    private async Task OnCardDropped(MudItemDropInfo<KanbanCardDto> info)
    {
        if (info?.Item is null || string.IsNullOrWhiteSpace(info.DropzoneIdentifier))
            return;

        if (!int.TryParse(info.DropzoneIdentifier, out var toColumnId))
            return;

        // Optimistic update: move item locally so UI reflects immediately (records have init-only props)
        var idx = _allCards.FindIndex(c => c.Id == info.Item.Id);
        if (idx >= 0)
        {
            var m = _allCards[idx];
            _allCards[idx] = new KanbanCardDto(m.Id, m.Title, m.Description, m.Position, toColumnId);
        }
        _dropContainer?.Refresh();
        StateHasChanged();

        // Persist on server (append at end for now)
        var toPosition = _allCards.Count(c => c.ColumnId == toColumnId && c.Id != info.Item.Id);
        await Api.PostAsJsonAsync("api/kanban/cards/move", new MoveCardRequest(info.Item.Id, toColumnId, toPosition));

        // Re-sync from server to ensure positions/order are authoritative
        var data = await Api.GetAsync<ColumnsResponse>("api/kanban/columns");
        _columns = data?.Columns ?? new();
        _allCards = _columns.SelectMany(c => c.Cards).ToList();
        _dropContainer?.Refresh();
        StateHasChanged();
    }

    

    // Simple JS prompt bridge
    [Inject] IJSRuntime JS { get; set; } = default!;
    private async Task<string?> PromptAsync(string message, string? defaultValue = null)
        => await JS.InvokeAsync<string?>("prompt", message, defaultValue);

    private record ColumnsResponse(List<ColumnVm> Columns);
    private record ColumnVm
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public int Position { get; set; }
        public List<KanbanCardDto> Cards { get; set; } = new();
    }
}

<style>
.kanban-page { display: flex; flex-direction: column; min-height: 100vh; }
.kanban-header { padding: 16px; }
.kanban-scroll { flex: 1; overflow-x: auto; overflow-y: hidden; }

.kanban-board { display: flex; flex-direction: row; align-items: flex-start; gap: 16px; padding: 8px 16px 16px; }
.kanban-column { width: 280px; min-width: 280px; background: var(--mud-palette-background); border-radius: 8px; min-height: 20px; }
.kanban-cards { display: flex; flex-direction: column; gap: 8px; padding: 6px; border-radius: 6px; background: var(--mud-palette-background-grey); min-height: 20px; }
.kanban-card { background: var(--mud-palette-surface); border-radius: 6px; box-shadow: var(--mud-elevation-2); padding: 8px; }
.kanban-card .title { font-weight: 600; }
.kanban-card.dragging { opacity: 0.6; }

.mud-paper.kanban-column .mud-divider { opacity: .5; }
.mud-paper.kanban-column .mud-button { margin-top: 8px; }

/* Hover suave nos cards */
.kanban-item,
.kanban-card {
  transition: transform 120ms ease, box-shadow 120ms ease, filter 120ms ease, background-color 120ms ease;
}

.kanban-item:hover,
.kanban-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--mud-elevation-8);
  filter: brightness(1.03);
}
</style>
