@page "/admin/users"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Reflection.Metadata
@using erp.Models
@using erp.DTOs.User
@using erp.DTOs.Role
@using erp.Services

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Users> Logger
@inject ISnackbar Snackbar

<PageTitle>Gerenciar Usuários</PageTitle>

<MudSnackbarProvider/>
<MudCard Elevation="4" Class="w-100">
    <MudCardHeader Style="margin-bottom: -20px">
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Adicionar usuários</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"></MudIconButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField T="string" Label="Nome" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Text" Required="true" RequiredError="Nome é obrigatório"
                      @bind-Value="_newUser.Username"/>
        <MudTextField T="string" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Email" Required="true" RequiredError="Email é obrigatório"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email inválido!"})"
                      @bind-Value="_newUser.Email"/>
        <MudTextField T="string" Label="Telefone" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Telephone" Required="true" RequiredError="Telefone é obrigatório"
                      Validation="@(new PhoneAttribute() {ErrorMessage = "Telefone inválido!"})" 
                      Placeholder="(00) 00000-0000" Mask="@(new PatternMask("(00) 00000-0000"))"
                      @bind-Value="_newUser.Phone"/>
        <MudSelect T="@RoleDto" @bind-SelectedValues="_selectedRoles" Label="Função/Permissão" MultiSelection="true"
                   Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                   RequiredError="Escolha pelo menos uma permissão" SelectAll="true" SelectAllText="Selecionar todos">
            @foreach (var roleOption in _rolesList)
            {
                <MudSelectItem T="@RoleDto" Value="@roleOption">@roleOption.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Add"
                   ButtonType="ButtonType.Submit"
                   OnClick="@HandleAddUser"
                   Class="w-100" Style="margin-top: 20px">
            Adicionar
        </MudButton>
    </MudCardContent>
</MudCard>

<MudDivider Class="my-4"/>

@if (_loadError != null)
{
    <MudAlert Severity="Severity.Error">@_loadError</MudAlert>
}

<MudTable T="UserDto" ServerData="new Func<TableState, CancellationToken, Task<TableData<UserDto>>>(ServerReload)" 
          Dense="false" Hover="true" Elevation="4" @ref="_table"
          RowClass="cursor-pointer" Striped='true'>
    <ToolBarContent>
        <MudText Typo="Typo.h5">Usuários Cadastrados</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="OnSearch" Immediate="true" Placeholder="Procurar" Variant="Variant.Outlined" Margin="Margin.Dense"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="username" T="UserDto">Nome</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email" T="UserDto">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="phone" T="UserDto">Telefone</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="roles" T="UserDto">Função/Permissão</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="active" T="UserDto">Ativo</MudTableSortLabel></MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Username</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Telefone">@context.Phone</MudTd>
        <MudTd DataLabel="Permissões">@string.Join(", ", context.RoleNames)</MudTd>
        <MudTd DataLabel="Ativo">@context.IsActive</MudTd>
        <MudTd DataLabel="Ações"/>    
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Nenhum usuário encontrado.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Carregando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    @implements IDisposable

    private MudTable<UserDto>? _table;
    private IEnumerable<UserDto>? _users;
    private int _totalItems;
    private string _searchString = "";

    private System.Timers.Timer? _debounceTimer;
    private const int DEBOUNCE_DELAY_MS = 600;

    private CreateUserDto _newUser = new()
    {
        RoleIds = new List<int>()
    };

    private IEnumerable<RoleDto> _selectedRoles = new List<RoleDto>();
    private List<RoleDto> _rolesList = new List<RoleDto>();
    
    private string? _loadError;

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
        
        _debounceTimer = new System.Timers.Timer(DEBOUNCE_DELAY_MS);
        _debounceTimer.Elapsed += OnDebounceTimerElapsed;
        _debounceTimer.AutoReset = false;
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            IEnumerable<UserDto> data = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("api/users", token);
            _loadError = null;

            data = data.Where(user =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;
                if (user.Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                return user.RoleNames.Any(r => r.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
            });

            _totalItems = data.Count();

            data = state.SortLabel switch
            {
                "username" => data.OrderByDirection(state.SortDirection, u => u.Username),
                "email" => data.OrderByDirection(state.SortDirection, u => u.Email),
                "phone" => data.OrderByDirection(state.SortDirection, u => u.Phone),
                "roles" => data.OrderByDirection(state.SortDirection, u => string.Join(",", u.RoleNames)),
                "active" => data.OrderByDirection(state.SortDirection, u => u.IsActive),
                _ => data
            };

            _users = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
            return new TableData<UserDto>() { TotalItems = _totalItems, Items = _users };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar usuários: {ex.Message}");
            _loadError = "Não foi possível carregar os usuários. Tente novamente mais tarde.";
            Snackbar.Add(_loadError, Severity.Error);
            return new TableData<UserDto>() { TotalItems = 0, Items = Enumerable.Empty<UserDto>() };
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }
    
    private void OnDebounceTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(() => _table?.ReloadServerData());
    }
    
    private async Task HandleAddUser()
    {
        try
        {
            _newUser.RoleIds = _selectedRoles.Select(r => r.Id).ToList();
            var response = await Http.PostAsJsonAsync("api/users", _newUser);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Usuário adicionado com sucesso.");
                _newUser = new CreateUserDto { RoleIds = new List<int>() };
                _selectedRoles = new List<RoleDto>();

                await _table.ReloadServerData();
                Snackbar.Add("Usuário adicionado com sucesso!", Severity.Success);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Erro ao adicionar usuário: {response.StatusCode} - {errorContent}");
                Snackbar.Add($"Erro ao adicionar usuário: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao adicionar usuário: {ex.Message}");
        }
    }

    private async Task LoadRolesAsync()
    {
        if (_rolesList.Any())
            return;
            
        try
        {
            var roles = await Http.GetFromJsonAsync<List<RoleDto>>("api/roles");
            _rolesList = roles ?? new List<RoleDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao buscar funções: {ex.Message}");
            _rolesList = new List<RoleDto>(); // Ensure it's not null on error
            Snackbar.Add("Erro ao buscar funções: " + ex.Message, Severity.Error);
        }
    }
    
    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}
