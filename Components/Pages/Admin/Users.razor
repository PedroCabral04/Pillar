@page "/admin/users"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Reflection.Metadata
@using erp.Models
@using erp.DTOs.User
@using erp.DTOs.Role

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Users> Logger
@inject ISnackbar Snackbar

<PageTitle>Gerenciar Usuários</PageTitle>

<MudSnackbarProvider/>
<MudCard Elevation="8" Class="w-100">
    <MudCardHeader Style="margin-bottom: -20px">
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Adicionar usuários</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"></MudIconButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField T="string" Label="Nome" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Text" Required="true" RequiredError="Nome é obrigatório"
                      @bind-Value="_newUser.Username"/>
        <MudTextField T="string" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Email" Required="true" RequiredError="Email é obrigatório"
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email inválido!"})"
                      @bind-Value="_newUser.Email"/>
        <MudTextField T="string" Label="Telefone" Variant="Variant.Outlined" Margin="Margin.Dense"
                      InputType="InputType.Telephone" Required="true" RequiredError="Telefone é obrigatório"
                      Validation="@(new PhoneAttribute() {ErrorMessage = "Telefone inválido!"})" 
                      Placeholder="(00) 00000-0000" Mask="@(new PatternMask("(00) 00000-0000"))"
                      @bind-Value="_newUser.Phone"/>
        <MudSelect T="int" @bind-Value="_newUser.RoleId" Label="Função/Permissão" MultiSelection="true"
                   Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                   RequiredError="Escolha pelo menos uma permissão" SelectAll="true" SelectAllText="Selecionar todos">
            @foreach (var roleOption in _rolesList)
            {
                <MudSelectItem T="int" Value="@roleOption.Id">@roleOption.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Add"
                   ButtonType="ButtonType.Submit"
                   OnClick="@HandleAddUser"
                   Class="w-100" Style="margin-top: 20px">
            Adicionar
        </MudButton>
    </MudCardContent>
</MudCard>

<MudDivider Class="my-4"/>

<MudText Typo="Typo.h4" GutterBottom="true">Usuários Existentes</MudText>
@if (_users == null && _loadError == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    <MudText>Carregando...</MudText>
} 
else if (_loadError != null)
{
    <MudAlert Severity="Severity.Error">@_loadError</MudAlert>
} 
else if (_users != null && _users.Any())
{
    <MudTable Items="@_users" Dense="true" Hover="true"
              Striped="true" Elevation="4">
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Telefone</MudTh>
            <MudTh>Função/Permissão</MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nome">@context.Username</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Telefone">@context.Phone</MudTd>
            <MudTd DataLabel="Permissões">@context.RoleName</MudTd>
            <MudTd DataLabel="Nome"/>
            <MudTd DataLabel="Ações"/>    
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudText>Nenhum usuário encontrado</MudText>
}


@code {
    private CreateUserDto _newUser = new CreateUserDto();

    private List<RoleDto> _rolesList = new List<RoleDto>();
    
    // Api retorna IEnumerable<UserDto>
    private IEnumerable<UserDto>? _users;
    private string? _loadError;

    protected override async Task OnInitializedAsync()
    {
        var executionContext = OperatingSystem.IsBrowser() ? "Client" : "Server";
        if (_users == null)
        {
            try
            {
                // A API está em "api/users" e o método GetAllUsers é um GET nesse endpoint.
                // HttpClient.GetFromJsonAsync desserializa a resposta JSON.
                _users = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("api/users");
                await LoadRolesAsync();
                _loadError = null; // Limpa erros anteriores
            }
            catch (Exception ex)
            {
                // Logar o erro real no console do servidor/browser para debugging
                Console.WriteLine($"Erro ao buscar usuários: {ex.Message}");
                _loadError = "Não foi possível carregar os usuários. Tente novamente mais tarde.";
                _users = Enumerable.Empty<UserDto>(); // Define como vazio para evitar null ref na UI
            }
        }
    }
    
    private async Task HandleAddUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/users", _newUser);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Usuário adicionado com sucesso.");
                _newUser = new CreateUserDto(); // Limpa o formulário
                if (_rolesList.Any())
                {
                    // Resetar RoleId para um valor padrão ou o primeiro da lista se desejar
                    // _newUser.RoleId = _roleOptions.First().Id; 
                }
                _users = await Http.GetFromJsonAsync<IEnumerable<UserDto>>("api/users"); // Recarrega a lista de usuários
                Snackbar.Add("Usuário adicionado com sucesso!", Severity.Success);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Erro ao adicionar usuário: {response.StatusCode} - {errorContent}");
                Snackbar.Add($"Erro ao adicionar usuário: {errorContent}", Severity.Error);

            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao adicionar usuário: {ex.Message}");
        }
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var roles = await Http.GetFromJsonAsync<List<RoleDto>>("api/roles");
            if (roles != null)
            {
                _rolesList = roles;
                // Optionally, set a default role if needed and none is selected
                if (_newUser.RoleId == 0 && _rolesList.Any())
                {
                    // _newUserToCreate.RoleId = _rolesList.First().Id; // Uncomment to pre-select the first role
                }
            }
            else
            {
                _rolesList = new List<RoleDto>(); // Ensure it's not null
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao buscar funções: {ex.Message}");
            _rolesList = new List<RoleDto>(); // Ensure it's not null on error
        }
        StateHasChanged();

    }
        
}
