@page "/admin/users"
@using System.ComponentModel.DataAnnotations
@using erp.Components.Shared.Dialogs
@using erp.DTOs.User
@using erp.DTOs.Role
@using erp.Services
@attribute [Authorize]

@inject IApiService ApiService
@inject ILogger<Users> Logger
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@implements IDisposable;

<PageTitle>Gerenciar Usuários</PageTitle>

<MudSnackbarProvider/>
<MudCard Elevation="4" Class="w-100">
    <MudCardHeader Style="margin-bottom: -20px">
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Adicionar usuários</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"></MudIconButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
            <MudForm @ref="_form">
                <MudTextField T="string" Label="Nome" Variant="Variant.Outlined" Margin="Margin.Dense"
                              InputType="InputType.Text"
                              @bind-Value="_newUser.Username"
                              Validation="@(_usernameRules)"/>

                <MudTextField T="string" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"
                              InputType="InputType.Email"
                              @bind-Value="_newUser.Email"
                              Validation="@(_emailRules)"/>

                <MudTextField T="string" Label="Telefone" Variant="Variant.Outlined" Margin="Margin.Dense"
                              InputType="InputType.Telephone"
                              Placeholder="(00) 00000-0000" Mask="@(new PatternMask("(00) 00000-0000"))"
                              @bind-Value="_newUser.Phone"
                              Validation="@(_phoneRules)"/>

                <MudSelect T="@RoleDto" @bind-SelectedValues="_selectedRoles" Label="Função/Permissão" MultiSelection="true"
                           Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                           RequiredError="Escolha pelo menos uma permissão" SelectAll="true" SelectAllText="Selecionar todos">
                    @foreach (var roleOption in _rolesList)
                    {
                        <MudSelectItem T="@RoleDto" Value="@roleOption">@roleOption.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudButton Color="Color.Primary" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Add"
                           ButtonType="ButtonType.Submit"
                           Disabled="@(_submitting || !(_selectedRoles?.Any() ?? false))"
                           OnClick="@HandleAddUser"
                           Class="w-100" Style="margin-top: 20px">
                    Adicionar
                </MudButton>
            </MudForm>
        </MudCardContent>
</MudCard>

<MudDivider Class="my-4"/>

<style>
    .dialog-blur {
        backdrop-filter: blur(5px);
    }
</style>

<style>
    .dialog-blur {
        backdrop-filter: blur(5px);
    }
</style>

@if (_loadError != null)
{
    <MudAlert Severity="Severity.Error">@_loadError</MudAlert>
}

<MudTable T="UserDto" ServerData="new Func<TableState, CancellationToken, Task<TableData<UserDto>>>(ServerReload)" 
          Dense="false" Hover="true" Elevation="4" @ref="_table" Striped='true'>
    <ToolBarContent>
        <MudText Typo="Typo.h5">Usuários Cadastrados</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="OnSearch" Immediate="true" Placeholder="Procurar" Variant="Variant.Outlined" Margin="Margin.Dense"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="username" T="UserDto">Nome</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="email" T="UserDto">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="phone" T="UserDto">Telefone</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="roles" T="UserDto">Função/Permissão</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="active" T="UserDto">Ativo</MudTableSortLabel></MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Username</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Telefone">@context.Phone</MudTd>
        <MudTd DataLabel="Permissões">@string.Join(", ", context.RoleAbbreviations)</MudTd>
        <MudTd DataLabel="Ativo">@(context.IsActive ? "Sim" : "Não")</MudTd>
        <MudTd><MudButton Variant="Variant.Outlined"  Color="Color.Info" Size="Size.Small" OnClick="@(() => ShowUserUpdateDialog(context.Id))">Editar</MudButton></MudTd>    
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Nenhum usuário encontrado.</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Carregando...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    private MudTable<UserDto>? _table;
    private IEnumerable<UserDto>? _users;
    private int _totalItems;
    private string _searchString = "";

    private System.Timers.Timer? _debounceTimer;
    private const int DebounceDelayMs = 600;

    private CreateUserDto _newUser = new()
    {
        RoleIds = new List<int>()
    };

    private IEnumerable<RoleDto> _selectedRoles = new List<RoleDto>();
    private List<RoleDto> _rolesList = new List<RoleDto>();
    
    private string? _loadError;
    private MudForm? _form;
    private bool _submitting = false;

    // Regras de validação do formulário (client-side)
    private Func<string, string?> _required(string fieldName) =>
        v => string.IsNullOrWhiteSpace(v) ? $"{fieldName} é obrigatório" : null;

    private IEnumerable<Func<string, string?>> _usernameRules => new List<Func<string, string?>>
    {
        _required("Nome"),
        v => v?.Trim().Length < 3 ? "Nome deve ter pelo menos 3 caracteres" : null,
        v => v?.Trim().Length > 50 ? "Nome não pode exceder 50 caracteres" : null
    };

    private IEnumerable<Func<string, string?>> _emailRules => new List<Func<string, string?>>
    {
        _required("Email"),
        v => new EmailAddressAttribute().IsValid(v) ? null : "Email inválido"
    };

    private static string OnlyDigits(string? s) => new string((s ?? string.Empty).Where(char.IsDigit).ToArray());
    private IEnumerable<Func<string, string?>> _phoneRules => new List<Func<string, string?>>
    {
        _required("Telefone"),
        v =>
        {
            var digits = OnlyDigits(v);
            return (digits.Length is < 10 or > 11) ? "Telefone deve conter DDD + número (10 ou 11 dígitos)" : null;
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
        
        _debounceTimer = new System.Timers.Timer(DebounceDelayMs);
        _debounceTimer = new System.Timers.Timer(DebounceDelayMs);
        _debounceTimer.Elapsed += OnDebounceTimerElapsed;
        _debounceTimer.AutoReset = false;
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            var response = await ApiService.GetAsync("api/users", token);
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                _loadError = "Você precisa estar autenticado para acessar esta página.";
                Snackbar.Add(_loadError, Severity.Error);
                return new TableData<UserDto>() { TotalItems = 0, Items = Enumerable.Empty<UserDto>() };
            }
            
            if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                _loadError = "Você não tem permissão para acessar esta página.";
                Snackbar.Add(_loadError, Severity.Error);
                return new TableData<UserDto>() { TotalItems = 0, Items = Enumerable.Empty<UserDto>() };
            }
            
            response.EnsureSuccessStatusCode();
            
            IEnumerable<UserDto> data = await response.Content.ReadFromJsonAsync<IEnumerable<UserDto>>(cancellationToken: token) 
                                            ?? Enumerable.Empty<UserDto>();
            _loadError = null;

            data = data.Where(user =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;
                if (user.Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                return user.RoleNames.Any(r => r.Contains(_searchString, StringComparison.OrdinalIgnoreCase));
            });

            _totalItems = data.Count();

            data = state.SortLabel switch
            {
                "username" => data.OrderByDirection(state.SortDirection, u => u.Username),
                "email" => data.OrderByDirection(state.SortDirection, u => u.Email),
                "phone" => data.OrderByDirection(state.SortDirection, u => u.Phone),
                "roles" => data.OrderByDirection(state.SortDirection, u => string.Join(",", u.RoleNames)),
                "active" => data.OrderByDirection(state.SortDirection, u => u.IsActive),
                _ => data
            };

            _users = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
            return new TableData<UserDto>() { TotalItems = _totalItems, Items = _users };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar usuários: {ex.Message}");
            _loadError = "Não foi possível carregar os usuários. Tente novamente mais tarde.";
            Snackbar.Add(_loadError, Severity.Error);
            return new TableData<UserDto>() { TotalItems = 0, Items = Enumerable.Empty<UserDto>() };
        }
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }
    
    private void OnDebounceTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(async () => { if (_table != null) await _table.ReloadServerData(); });
    }
    
    private async Task HandleAddUser()
    {
        try
        {
            // 1) Validação client-side
            await (_form?.Validate() ?? Task.CompletedTask);
            if (!(_form?.IsValid ?? false))
            {
                Snackbar.Add("Verifique os campos destacados e tente novamente.", Severity.Warning);
                return;
            }

            if (_selectedRoles == null || !_selectedRoles.Any())
            {
                Snackbar.Add("Escolha pelo menos uma permissão.", Severity.Warning);
                return;
            }

            // Sanitiza telefone para enviar apenas dígitos
            _newUser.Phone = OnlyDigits(_newUser.Phone);
            if (_newUser.Phone.Length is < 10 or > 11)
            {
                Snackbar.Add("Telefone inválido. Informe DDD + número (10 ou 11 dígitos).", Severity.Warning);
                return;
            }

            _submitting = true;
            _newUser.RoleIds = _selectedRoles.Select(r => r.Id).ToList();
            var response = await ApiService.PostAsJsonAsync("api/users", _newUser);
            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Usuário adicionado com sucesso.");
                _newUser = new CreateUserDto() { RoleIds = new List<int>() };
                _selectedRoles = new List<RoleDto>();

                if (_table != null)
                    await _table.ReloadServerData();
                Snackbar.Add("Usuário adicionado com sucesso!", Severity.Success);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Erro ao adicionar usuário: {response.StatusCode} - {errorContent}");
                Snackbar.Add($"Erro ao adicionar usuário: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao adicionar usuário: {ex.Message}");
            Snackbar.Add("Erro inesperado ao adicionar usuário.", Severity.Error);
        }
        finally
        {
            _submitting = false;
        }
    }

    private async Task LoadRolesAsync()
    {
        if (_rolesList.Any())
            return;
            
        try
        {
            var response = await ApiService.GetAsync("api/roles");
            
            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Logger.LogError("Não autorizado para buscar funções.");
                Snackbar.Add("Você precisa estar autenticado para acessar as funções.", Severity.Error);
                _rolesList = new List<RoleDto>();
                return;
            }
            
            if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                Logger.LogError("Acesso negado para buscar funções.");
                Snackbar.Add("Você não tem permissão para acessar as funções.", Severity.Error);
                _rolesList = new List<RoleDto>();
                return;
            }
            
            response.EnsureSuccessStatusCode();
            
            var roles = await response.Content.ReadFromJsonAsync<List<RoleDto>>();
            _rolesList = roles ?? new List<RoleDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erro ao buscar funções: {ex.Message}");
            _rolesList = new List<RoleDto>(); // Ensure it's not null on error
            Snackbar.Add("Erro ao buscar funções: " + ex.Message, Severity.Error);
        }
    }

    private async Task ShowUserUpdateDialog(int userId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, BackgroundClass = "dialog-blur" };
        var parameters = new DialogParameters<UserUpdateDialog> { { x => x.UserId, userId } };

        var userName = _users?.FirstOrDefault(u => u.Id == userId)?.Username ?? "usuário";
        var dialog = await DialogService.ShowAsync<UserUpdateDialog>($"Alterar {userName}", parameters, options);
        var result = await dialog.Result;
        
        if (result is { Canceled: false } && _table != null)
        {
            await _table.ReloadServerData();
        }
    }
    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}
