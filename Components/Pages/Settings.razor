@page "/ajustes"
@attribute [Authorize]
@using erp.Services

<PageTitle>Configurações</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Configurações</MudText>
<MudText Typo="Typo.body1" GutterBottom="true">Faça ajustes na plataforma e deixe de acordo com sua preferência</MudText>

<MudTabs Position="Position.Top" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-2" Outlined="true">
    <MudTabPanel Text="Perfil" Icon="@Icons.Material.Filled.Person"/>
    <MudTabPanel Text="Segurança" Icon="@Icons.Material.Filled.Security"/>
    <MudTabPanel Text="Visual" Icon="@Icons.Material.Filled.Brightness6">
        <MudSwitch T="bool"
                   Value="@ThemeService.IsDarkMode"
                   ValueChanged="@OnThemeSwitchChanged"
                   ThumbIcon="@ThemeIcon"
                   Color="Color.Primary"
                   Label="@ThemeLabel"
                   ThumbIconChecked="@Icons.Material.Filled.DarkMode"
                   ThumbIconUnchecked="@Icons.Material.Filled.LightMode"
                   Class="mb-2">
        </MudSwitch>
    </MudTabPanel>
    <MudTabPanel Text="Notificações" Icon="@Icons.Material.Filled.Notifications"/>
    <MudTabPanel Text="Áudio" Icon="@Icons.Material.Filled.VolumeUp"/>

</MudTabs>

@code {
    [Inject] ThemeService ThemeService { get; set; } = null!;
    [Inject] PreferenceService PreferenceService { get; set; } = null!;
    private string ThemeLabel => ThemeService.IsDarkMode ? "Modo escuro" : "Modo claro";
    private string ThemeIcon => ThemeService.IsDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode;

    private async Task OnThemeSwitchChanged(bool newValue)
    {
        await ThemeService.SetDarkModeAsync(newValue);
    }
}