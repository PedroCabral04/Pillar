@using erp.Services
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject PreferenceService PreferenceService
@inject IJSRuntime JsRuntime

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="ThemeService.IsDarkMode" Theme="@_customTheme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudPaper Style="position: relative; height: 100vh; display: flex" >
        <MudDrawerContainer Class="mud-height-full">
            <MudDrawer id="nav-drawer" 
                       Fixed="false" 
                       Variant="@DrawerVariant.Mini" 
                       OpenMiniOnHover="true" 
                       @bind-Open="_drawerOpen" 
                       ClipMode="DrawerClipMode.Always" 
                       Elevation="2"
                       Width="170px">
                    <NavMenu/>
            </MudDrawer>
        </MudDrawerContainer>
        <MudMainContent 
            Class="pa-4 full-height-content" 
            Style="@MainContentStyle()">
            @Body
        </MudMainContent>
        <MudScrollToTop>
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
        </MudScrollToTop>
    </MudPaper>
</MudLayout>


@*<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
    <div/>*@

@code {
    private bool _drawerOpen = false;
    private MudThemeProvider _mudThemeProvider = null!;
    public bool IsDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PreferenceService.InitializeAsync();
            ThemeService.InitializeTheme();
            PreferenceService.OnPreferenceChanged += OnPreferenceChanged;
            StateHasChanged();
        }
    }

    private void OnPreferenceChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        PreferenceService.OnPreferenceChanged -= OnPreferenceChanged;
    }

    readonly MudTheme _customTheme = new MudTheme()
    {
        // Light: vibrant and friendly with warm neutrals
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.DeepPurple.Darken1,
            Secondary = Colors.Cyan.Darken1,
            Tertiary = Colors.Amber.Default,

            Success = Colors.Green.Darken2,
            Info = Colors.LightBlue.Darken1,
            Warning = Colors.Orange.Darken1,
            Error = Colors.Red.Darken1,

            Background = Colors.BlueGray.Lighten5,
            Surface = Colors.Gray.Lighten5,
            AppbarBackground = Colors.DeepPurple.Darken2,
            DrawerBackground = Colors.BlueGray.Lighten4,

            TextPrimary = Colors.BlueGray.Darken3,
            TextSecondary = Colors.BlueGray.Default,
        },

        // Dark: saturated accents on deep blue-Gray surfaces for contrast
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.DeepPurple.Lighten2,
            Secondary = Colors.Cyan.Lighten2,
            Tertiary = Colors.Amber.Lighten1,

            Success = Colors.Green.Lighten2,
            Info = Colors.LightBlue.Lighten2,
            Warning = Colors.Orange.Lighten2,
            Error = Colors.Red.Lighten2,

            Background = Colors.BlueGray.Darken4,
            Surface = Colors.BlueGray.Darken3,
            AppbarBackground = Colors.DeepPurple.Darken3,
            DrawerBackground = Colors.BlueGray.Darken3,

            TextPrimary = Colors.Gray.Lighten5,
            TextSecondary = Colors.Gray.Lighten2,
        },

        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { "Poppins", "Roboto", "Segoe UI", "Arial", "sans-serif" },
            },
            H5 = new H5Typography(){ FontWeight = "600", LetterSpacing = "0.2px" },
            Button = new ButtonTypography(){ TextTransform = "none", FontWeight = "600" },
            Subtitle2 = new Subtitle2Typography(){ FontWeight = "600" }
        },
    };

        string SetMarginForDrawer()
    {
        return _drawerOpen ? "margin-left: 170px;" : "margin-left: 56px;";
    }

    private string MainContentStyle()
    {
        var style = $"{SetMarginForDrawer()} flex: 1 1 auto; min-height: 0; overflow-y: auto;";
        if (PreferenceService.CurrentPreferences?.Ui?.FontSize == "small")
        {
            style += "font-size: 0.9rem;";
        }
        else if (PreferenceService.CurrentPreferences?.Ui?.FontSize == "large")
        {
            style += "font-size: 1.1rem;";
        }
        return style;
    }
}
